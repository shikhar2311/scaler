{"ast":null,"code":"var _jsxFileName = \"/Users/shikharrajput/Desktop/scaler/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\n\n// Dummy list of users for the sidebar\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dummyUsers = [{\n  id: 1,\n  name: 'Alice'\n}, {\n  id: 2,\n  name: 'Bob'\n}, {\n  id: 3,\n  name: 'Charlie'\n}];\nfunction App() {\n  _s();\n  const [selectedUser, setSelectedUser] = useState(dummyUsers[0]);\n  const [messages, setMessages] = useState([]);\n  const [textInput, setTextInput] = useState('');\n\n  // Switch active user\n  const handleUserSelect = user => {\n    setSelectedUser(user);\n    setMessages([]); // optional: clear messages when switching users\n  };\n\n  // Send a message and get ChatGPT response\n  const handleSend = async e => {\n    e.preventDefault();\n    if (!textInput.trim()) return;\n\n    // 1. Add user message to the local state\n    const userMessage = {\n      id: Date.now(),\n      sender: 'user',\n      text: textInput\n    };\n    const updatedMessages = [...messages, userMessage];\n    setMessages(updatedMessages);\n    setTextInput('');\n\n    // 2. Convert messages to ChatGPT's required format\n    const conversation = updatedMessages.map(msg => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.text\n    }));\n\n    // 3. Call the backend to get GPT response\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messages: conversation\n        })\n      });\n      const data = await response.json();\n\n      // 4. Extract GPT response from the data\n      const gptText = data.choices[0].message.content;\n      const gptMessage = {\n        id: Date.now() + 1,\n        sender: 'assistant',\n        // or 'gpt'\n        text: gptText\n      };\n\n      // 5. Update messages with GPT response\n      setMessages(prev => [...prev, gptMessage]);\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dummyUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: selectedUser.id === user.id ? 'active' : '',\n          onClick: () => handleUserSelect(user),\n          children: user.name\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Chat with \", selectedUser.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        className: \"chat-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: textInput,\n          onChange: e => setTextInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"s2mR/2O8XfZuZrWh/jMVslClIl8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","dummyUsers","id","name","App","_s","selectedUser","setSelectedUser","messages","setMessages","textInput","setTextInput","handleUserSelect","user","handleSend","e","preventDefault","trim","userMessage","Date","now","sender","text","updatedMessages","conversation","map","msg","role","content","response","fetch","method","headers","body","JSON","stringify","data","json","gptText","choices","message","gptMessage","prev","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/shikharrajput/Desktop/scaler/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n// Dummy list of users for the sidebar\nconst dummyUsers = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n  { id: 3, name: 'Charlie' },\n];\n\nfunction App() {\n  const [selectedUser, setSelectedUser] = useState(dummyUsers[0]);\n  const [messages, setMessages] = useState([]);\n  const [textInput, setTextInput] = useState('');\n\n  // Switch active user\n  const handleUserSelect = (user) => {\n    setSelectedUser(user);\n    setMessages([]); // optional: clear messages when switching users\n  };\n\n  // Send a message and get ChatGPT response\n  const handleSend = async (e) => {\n    e.preventDefault();\n    if (!textInput.trim()) return;\n\n    // 1. Add user message to the local state\n    const userMessage = {\n      id: Date.now(),\n      sender: 'user',\n      text: textInput,\n    };\n    const updatedMessages = [...messages, userMessage];\n    setMessages(updatedMessages);\n    setTextInput('');\n\n    // 2. Convert messages to ChatGPT's required format\n    const conversation = updatedMessages.map((msg) => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.text,\n    }));\n\n    // 3. Call the backend to get GPT response\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ messages: conversation }),\n      });\n      const data = await response.json();\n\n      // 4. Extract GPT response from the data\n      const gptText = data.choices[0].message.content;\n      const gptMessage = {\n        id: Date.now() + 1,\n        sender: 'assistant', // or 'gpt'\n        text: gptText,\n      };\n\n      // 5. Update messages with GPT response\n      setMessages((prev) => [...prev, gptMessage]);\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"sidebar\">\n        <h3>Users</h3>\n        <ul>\n          {dummyUsers.map((user) => (\n            <li\n              key={user.id}\n              className={selectedUser.id === user.id ? 'active' : ''}\n              onClick={() => handleUserSelect(user)}\n            >\n              {user.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"chat-container\">\n        <div className=\"chat-header\">\n          <h2>Chat with {selectedUser.name}</h2>\n        </div>\n        <div className=\"chat-window\">\n          {messages.map((message) => (\n            <div key={message.id} className={`message ${message.sender}`}>\n              <p>{message.text}</p>\n            </div>\n          ))}\n        </div>\n        <form onSubmit={handleSend} className=\"chat-form\">\n          <input\n            type=\"text\"\n            placeholder=\"Type your message...\"\n            value={textInput}\n            onChange={(e) => setTextInput(e.target.value)}\n          />\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}