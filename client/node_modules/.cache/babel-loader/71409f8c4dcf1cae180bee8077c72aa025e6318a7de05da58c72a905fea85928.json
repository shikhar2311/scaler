{"ast":null,"code":"var _jsxFileName = \"/Users/shikharrajput/Desktop/scaler/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\n\n// Dummy list of users for the sidebar\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dummyUsers = [{\n  id: 1,\n  name: 'Alice'\n}, {\n  id: 2,\n  name: 'Bob'\n}, {\n  id: 3,\n  name: 'Charlie'\n}];\nfunction App() {\n  _s();\n  // State to manage selected user, messages, and the input text\n  const [selectedUser, setSelectedUser] = useState(dummyUsers[0]);\n  const [messages, setMessages] = useState([]);\n  const [textInput, setTextInput] = useState('');\n\n  // Handle switching active users from the sidebar\n  const handleUserSelect = user => {\n    setSelectedUser(user);\n    // For simplicity, clear previous messages when a new user is selected.\n    setMessages([]);\n  };\n\n  // Handle sending a message from the input box\n  const handleSend = event => {\n    event.preventDefault();\n    if (!textInput.trim()) return;\n\n    // Create a new user message\n    const userMessage = {\n      id: Date.now(),\n      sender: 'user',\n      text: textInput,\n      timestamp: new Date()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n\n    // Simulate a GPT response after a delay\n    setTimeout(() => {\n      const gptResponse = {\n        id: Date.now() + 1,\n        sender: 'gpt',\n        text: 'Hint: Try breaking the problem into smaller sub-problems. What data structure might simplify your approach?',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, gptResponse]);\n    }, 1500);\n\n    // Clear the input field after sending\n    setTextInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dummyUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: selectedUser.id === user.id ? 'active' : '',\n          onClick: () => handleUserSelect(user),\n          children: user.name\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Chat with \", selectedUser.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        className: \"chat-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: textInput,\n          onChange: e => setTextInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"s2mR/2O8XfZuZrWh/jMVslClIl8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","dummyUsers","id","name","App","_s","selectedUser","setSelectedUser","messages","setMessages","textInput","setTextInput","handleUserSelect","user","handleSend","event","preventDefault","trim","userMessage","Date","now","sender","text","timestamp","prevMessages","setTimeout","gptResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","message","onSubmit","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/shikharrajput/Desktop/scaler/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n// Dummy list of users for the sidebar\nconst dummyUsers = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n  { id: 3, name: 'Charlie' },\n];\n\nfunction App() {\n  // State to manage selected user, messages, and the input text\n  const [selectedUser, setSelectedUser] = useState(dummyUsers[0]);\n  const [messages, setMessages] = useState([]);\n  const [textInput, setTextInput] = useState('');\n\n  // Handle switching active users from the sidebar\n  const handleUserSelect = (user) => {\n    setSelectedUser(user);\n    // For simplicity, clear previous messages when a new user is selected.\n    setMessages([]);\n  };\n\n  // Handle sending a message from the input box\n  const handleSend = (event) => {\n    event.preventDefault();\n    if (!textInput.trim()) return;\n\n    // Create a new user message\n    const userMessage = {\n      id: Date.now(),\n      sender: 'user',\n      text: textInput,\n      timestamp: new Date(),\n    };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    // Simulate a GPT response after a delay\n    setTimeout(() => {\n      const gptResponse = {\n        id: Date.now() + 1,\n        sender: 'gpt',\n        text: 'Hint: Try breaking the problem into smaller sub-problems. What data structure might simplify your approach?',\n        timestamp: new Date(),\n      };\n      setMessages((prevMessages) => [...prevMessages, gptResponse]);\n    }, 1500);\n\n    // Clear the input field after sending\n    setTextInput('');\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"sidebar\">\n        <h3>Users</h3>\n        <ul>\n          {dummyUsers.map((user) => (\n            <li\n              key={user.id}\n              className={selectedUser.id === user.id ? 'active' : ''}\n              onClick={() => handleUserSelect(user)}\n            >\n              {user.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"chat-container\">\n        <div className=\"chat-header\">\n          <h2>Chat with {selectedUser.name}</h2>\n        </div>\n        <div className=\"chat-window\">\n          {messages.map((message) => (\n            <div key={message.id} className={`message ${message.sender}`}>\n              <p>{message.text}</p>\n            </div>\n          ))}\n        </div>\n        <form onSubmit={handleSend} className=\"chat-form\">\n          <input\n            type=\"text\"\n            placeholder=\"Type your message...\"\n            value={textInput}\n            onChange={(e) => setTextInput(e.target.value)}\n          />\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}