{"ast":null,"code":"import EmptyChatState from'./EmptyChatState';// Import the new component\nimport React,{useState,useEffect,useRef}from'react';import ReactMarkdown from'react-markdown';import'./App.css';// Dummy list of users for the sidebar\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const dummyUsers=[{id:1,name:'Alice',avatar:'👩‍💼'},{id:2,name:'Bob',avatar:'👨‍💻'},{id:3,name:'Charlie',avatar:'🧑‍🎨'},{id:4,name:'Diana',avatar:'👩‍🔬'},{id:5,name:'Ethan',avatar:'👨‍🚀'}];function App(){const[selectedUser,setSelectedUser]=useState(dummyUsers[0]);const[messages,setMessages]=useState([]);const[textInput,setTextInput]=useState('');const[isLoading,setIsLoading]=useState(false);const[darkMode,setDarkMode]=useState(false);const[problemData,setProblemData]=useState(null);const messagesEndRef=useRef(null);// Switch active user\nconst handleUserSelect=user=>{setSelectedUser(user);setMessages([]);// clear messages when switching users\nsetProblemData(null);// clear problem data\n};// Auto-scroll to the bottom of the chat\nuseEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});},[messages]);// Toggle dark mode\nconst toggleDarkMode=()=>{setDarkMode(!darkMode);document.body.classList.toggle('dark-mode');};// Format timestamps\nconst formatTime=()=>{const now=new Date();return now.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});};// Check if input is a LeetCode URL\nconst isLeetCodeUrl=text=>{return text.trim().match(/^https?:\\/\\/(www\\.)?leetcode\\.com\\/problems\\/[a-zA-Z0-9-]+\\/?$/i);};// Extract problem slug from URL\nconst extractProblemSlug=url=>{const match=url.match(/problems\\/([a-zA-Z0-9-]+)/i);return match?match[1]:null;};// Fetch problem details from LeetCode\nconst fetchProblemDetails=async url=>{const slug=extractProblemSlug(url);if(!slug)return null;setIsLoading(true);try{// This would be replaced with your actual API endpoint for fetching problem details\nconst response=await fetch(`http://localhost:8000/api/leetcode/problem/${slug}`);const data=await response.json();if(data.success){return data.problem;}return null;}catch(err){console.error('Error fetching problem details:',err);return null;}finally{setIsLoading(false);}};// Handle both regular text input and LeetCode URL\nconst handleSend=async e=>{e.preventDefault();if(!textInput.trim())return;const userInputText=textInput.trim();setTextInput('');// Add user message to the local state\nconst userMessage={id:Date.now(),sender:'user',text:userInputText,time:formatTime()};const updatedMessages=[...messages,userMessage];setMessages(updatedMessages);setIsLoading(true);// Check if the input is a LeetCode URL\nif(isLeetCodeUrl(userInputText)&&!problemData){// Fetch problem details\nconst problem=await fetchProblemDetails(userInputText);if(problem){setProblemData(problem);// Add system message about detected problem\nconst systemMessage={id:Date.now()+1,sender:'system',text:`I've loaded the LeetCode problem \"${problem.title}\". What specific part are you stuck on?`,time:formatTime()};setMessages(prev=>[...prev,systemMessage]);setIsLoading(false);return;}else{// Failed to fetch problem\nconst errorMessage={id:Date.now()+1,sender:'system',text:`I couldn't load the problem from that URL. Please check the link or describe the problem manually.`,time:formatTime()};setMessages(prev=>[...prev,errorMessage]);setIsLoading(false);return;}}// Convert messages to ChatGPT's required format\nconst conversation=updatedMessages.map(msg=>({role:msg.sender==='user'?'user':'assistant',content:msg.text}));// Add problem context if available\nlet apiBody={messages:conversation};if(problemData){apiBody.problemContext=problemData;}// Call the backend to get AI response\ntry{const response=await fetch('http://localhost:8000/api/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(apiBody)});const data=await response.json();// Extract AI response from the data\nconst aiText=data.choices[0].message.content;const aiMessage={id:Date.now()+1,sender:'assistant',text:aiText,time:formatTime()};// Update messages with AI response\nsetMessages(prev=>[...prev,aiMessage]);}catch(err){console.error('Error:',err);// Add error message to chat\nsetMessages(prev=>[...prev,{id:Date.now()+1,sender:'system',text:'Sorry, there was an error connecting to the AI. Please try again.',time:formatTime()}]);}finally{setIsLoading(false);}};// Display problem details if loaded\nconst renderProblemContext=()=>{if(!problemData)return null;return/*#__PURE__*/_jsxs(\"div\",{className:\"problem-context\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"problem-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:problemData.title}),/*#__PURE__*/_jsx(\"span\",{className:`difficulty ${problemData.difficulty.toLowerCase()}`,children:problemData.difficulty})]}),/*#__PURE__*/_jsx(\"div\",{className:\"problem-tags\",children:problemData.tags.map((tag,index)=>/*#__PURE__*/_jsx(\"span\",{className:\"problem-tag\",children:tag},index))})]});};return/*#__PURE__*/_jsxs(\"div\",{className:`app-container ${darkMode?'dark-mode':''}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"LeetCode Assistant\"}),/*#__PURE__*/_jsx(\"button\",{className:\"theme-toggle\",onClick:toggleDarkMode,children:darkMode?'☀️':'🌙'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"sidebar-header\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Contacts\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"users-list\",children:dummyUsers.map(user=>/*#__PURE__*/_jsxs(\"div\",{className:`user-item ${selectedUser.id===user.id?'active':''}`,onClick:()=>handleUserSelect(user),children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-avatar\",children:user.avatar}),/*#__PURE__*/_jsx(\"div\",{className:\"user-name\",children:user.name})]},user.id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header-user\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"user-avatar\",children:selectedUser.avatar}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"Chat with \",selectedUser.name]})]})}),renderProblemContext(),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-window\",children:[messages.length===0?/*#__PURE__*/_jsx(EmptyChatState,{}):messages.map(message=>/*#__PURE__*/_jsx(\"div\",{className:`message-wrapper ${message.sender}`,children:/*#__PURE__*/_jsxs(\"div\",{className:`message ${message.sender}`,children:[message.sender==='assistant'&&/*#__PURE__*/_jsx(\"div\",{className:\"message-avatar\",children:\"\\uD83E\\uDD16\"}),message.sender==='user'&&/*#__PURE__*/_jsx(\"div\",{className:\"message-avatar\",children:selectedUser.avatar}),message.sender==='system'&&/*#__PURE__*/_jsx(\"div\",{className:\"message-avatar\",children:\"\\u2139\\uFE0F\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-text\",children:message.sender==='assistant'?/*#__PURE__*/_jsx(ReactMarkdown,{children:message.text}):message.text}),/*#__PURE__*/_jsx(\"div\",{className:\"message-time\",children:message.time})]})]})},message.id)),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"message-wrapper assistant\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"message assistant\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-avatar\",children:\"\\uD83E\\uDD16\"}),/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"typing-indicator\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]})})]})}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSend,className:\"chat-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:problemData?`Ask about \"${problemData.title}\"...`:\"Enter a LeetCode URL or ask a question...\",value:textInput,onChange:e=>setTextInput(e.target.value),disabled:isLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!textInput.trim()||isLoading,className:isLoading?'loading':'',children:isLoading?'...':'Send'})]})]})]})]});}export default App;","map":{"version":3,"names":["EmptyChatState","React","useState","useEffect","useRef","ReactMarkdown","jsx","_jsx","jsxs","_jsxs","dummyUsers","id","name","avatar","App","selectedUser","setSelectedUser","messages","setMessages","textInput","setTextInput","isLoading","setIsLoading","darkMode","setDarkMode","problemData","setProblemData","messagesEndRef","handleUserSelect","user","_messagesEndRef$curre","current","scrollIntoView","behavior","toggleDarkMode","document","body","classList","toggle","formatTime","now","Date","toLocaleTimeString","hour","minute","isLeetCodeUrl","text","trim","match","extractProblemSlug","url","fetchProblemDetails","slug","response","fetch","data","json","success","problem","err","console","error","handleSend","e","preventDefault","userInputText","userMessage","sender","time","updatedMessages","systemMessage","title","prev","errorMessage","conversation","map","msg","role","content","apiBody","problemContext","method","headers","JSON","stringify","aiText","choices","message","aiMessage","renderProblemContext","className","children","difficulty","toLowerCase","tags","tag","index","onClick","length","ref","onSubmit","type","placeholder","value","onChange","target","disabled"],"sources":["/Users/shikharrajput/Desktop/scaler/client/src/App.js"],"sourcesContent":["import EmptyChatState from './EmptyChatState'; // Import the new component\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport './App.css';\n\n// Dummy list of users for the sidebar\nconst dummyUsers = [\n  { id: 1, name: 'Alice', avatar: '👩‍💼' },\n  { id: 2, name: 'Bob', avatar: '👨‍💻' },\n  { id: 3, name: 'Charlie', avatar: '🧑‍🎨' },\n  { id: 4, name: 'Diana', avatar: '👩‍🔬' },\n  { id: 5, name: 'Ethan', avatar: '👨‍🚀' },\n];\n\nfunction App() {\n  const [selectedUser, setSelectedUser] = useState(dummyUsers[0]);\n  const [messages, setMessages] = useState([]);\n  const [textInput, setTextInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const [problemData, setProblemData] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // Switch active user\n  const handleUserSelect = (user) => {\n    setSelectedUser(user);\n    setMessages([]); // clear messages when switching users\n    setProblemData(null); // clear problem data\n  };\n\n  // Auto-scroll to the bottom of the chat\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Toggle dark mode\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    document.body.classList.toggle('dark-mode');\n  };\n\n  // Format timestamps\n  const formatTime = () => {\n    const now = new Date();\n    return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  // Check if input is a LeetCode URL\n  const isLeetCodeUrl = (text) => {\n    return text.trim().match(/^https?:\\/\\/(www\\.)?leetcode\\.com\\/problems\\/[a-zA-Z0-9-]+\\/?$/i);\n  };\n\n  // Extract problem slug from URL\n  const extractProblemSlug = (url) => {\n    const match = url.match(/problems\\/([a-zA-Z0-9-]+)/i);\n    return match ? match[1] : null;\n  };\n\n  // Fetch problem details from LeetCode\n  const fetchProblemDetails = async (url) => {\n    const slug = extractProblemSlug(url);\n    if (!slug) return null;\n\n    setIsLoading(true);\n    try {\n      // This would be replaced with your actual API endpoint for fetching problem details\n      const response = await fetch(`http://localhost:8000/api/leetcode/problem/${slug}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        return data.problem;\n      }\n      return null;\n    } catch (err) {\n      console.error('Error fetching problem details:', err);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle both regular text input and LeetCode URL\n  const handleSend = async (e) => {\n    e.preventDefault();\n    if (!textInput.trim()) return;\n\n    const userInputText = textInput.trim();\n    setTextInput('');\n\n    // Add user message to the local state\n    const userMessage = {\n      id: Date.now(),\n      sender: 'user',\n      text: userInputText,\n      time: formatTime(),\n    };\n    \n    const updatedMessages = [...messages, userMessage];\n    setMessages(updatedMessages);\n    setIsLoading(true);\n\n    // Check if the input is a LeetCode URL\n    if (isLeetCodeUrl(userInputText) && !problemData) {\n      // Fetch problem details\n      const problem = await fetchProblemDetails(userInputText);\n      \n      if (problem) {\n        setProblemData(problem);\n        \n        // Add system message about detected problem\n        const systemMessage = {\n          id: Date.now() + 1,\n          sender: 'system',\n          text: `I've loaded the LeetCode problem \"${problem.title}\". What specific part are you stuck on?`,\n          time: formatTime(),\n        };\n        \n        setMessages(prev => [...prev, systemMessage]);\n        setIsLoading(false);\n        return;\n      } else {\n        // Failed to fetch problem\n        const errorMessage = {\n          id: Date.now() + 1,\n          sender: 'system',\n          text: `I couldn't load the problem from that URL. Please check the link or describe the problem manually.`,\n          time: formatTime(),\n        };\n        \n        setMessages(prev => [...prev, errorMessage]);\n        setIsLoading(false);\n        return;\n      }\n    }\n\n    // Convert messages to ChatGPT's required format\n    const conversation = updatedMessages.map((msg) => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.text,\n    }));\n\n    // Add problem context if available\n    let apiBody = { messages: conversation };\n    if (problemData) {\n      apiBody.problemContext = problemData;\n    }\n\n    // Call the backend to get AI response\n    try {\n      const response = await fetch('http://localhost:8000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(apiBody),\n      });\n      \n      const data = await response.json();\n      \n      // Extract AI response from the data\n      const aiText = data.choices[0].message.content;\n      const aiMessage = {\n        id: Date.now() + 1,\n        sender: 'assistant',\n        text: aiText,\n        time: formatTime(),\n      };\n      \n      // Update messages with AI response\n      setMessages((prev) => [...prev, aiMessage]);\n    } catch (err) {\n      console.error('Error:', err);\n      // Add error message to chat\n      setMessages((prev) => [\n        ...prev,\n        {\n          id: Date.now() + 1,\n          sender: 'system',\n          text: 'Sorry, there was an error connecting to the AI. Please try again.',\n          time: formatTime(),\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Display problem details if loaded\n  const renderProblemContext = () => {\n    if (!problemData) return null;\n    \n    return (\n      <div className=\"problem-context\">\n        <div className=\"problem-header\">\n          <h3>{problemData.title}</h3>\n          <span className={`difficulty ${problemData.difficulty.toLowerCase()}`}>\n            {problemData.difficulty}\n          </span>\n        </div>\n        <div className=\"problem-tags\">\n          {problemData.tags.map((tag, index) => (\n            <span key={index} className=\"problem-tag\">{tag}</span>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={`app-container ${darkMode ? 'dark-mode' : ''}`}>\n      <div className=\"app-header\">\n        <h1>LeetCode Assistant</h1>\n        <button className=\"theme-toggle\" onClick={toggleDarkMode}>\n          {darkMode ? '☀️' : '🌙'}\n        </button>\n      </div>\n      \n      <div className=\"main-container\">\n        <div className=\"sidebar\">\n          <div className=\"sidebar-header\">\n            <h3>Contacts</h3>\n          </div>\n          <div className=\"users-list\">\n            {dummyUsers.map((user) => (\n              <div\n                key={user.id}\n                className={`user-item ${selectedUser.id === user.id ? 'active' : ''}`}\n                onClick={() => handleUserSelect(user)}\n              >\n                <div className=\"user-avatar\">{user.avatar}</div>\n                <div className=\"user-name\">{user.name}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"chat-container\">\n          <div className=\"chat-header\">\n            <div className=\"chat-header-user\">\n              <span className=\"user-avatar\">{selectedUser.avatar}</span>\n              <h2>Chat with {selectedUser.name}</h2>\n            </div>\n          </div>\n          \n          {renderProblemContext()}\n          \n          <div className=\"chat-window\">\n            {messages.length === 0 ? (\n              <EmptyChatState />\n            ) : (\n              messages.map((message) => (\n                <div \n                  key={message.id} \n                  className={`message-wrapper ${message.sender}`}\n                >\n                  <div className={`message ${message.sender}`}>\n                    {message.sender === 'assistant' && (\n                      <div className=\"message-avatar\">🤖</div>\n                    )}\n                    {message.sender === 'user' && (\n                      <div className=\"message-avatar\">{selectedUser.avatar}</div>\n                    )}\n                    {message.sender === 'system' && (\n                      <div className=\"message-avatar\">ℹ️</div>\n                    )}\n                    <div className=\"message-content\">\n                    <div className=\"message-text\">\n  {message.sender === 'assistant' ? (\n    <ReactMarkdown>{message.text}</ReactMarkdown>\n  ) : (\n    message.text\n  )}\n</div>\n                      <div className=\"message-time\">{message.time}</div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {isLoading && (\n              <div className=\"message-wrapper assistant\">\n                <div className=\"message assistant\">\n                  <div className=\"message-avatar\">🤖</div>\n                  <div className=\"message-content\">\n                    <div className=\"typing-indicator\">\n                      <span></span>\n                      <span></span>\n                      <span></span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          <form onSubmit={handleSend} className=\"chat-form\">\n            <input\n              type=\"text\"\n              placeholder={problemData \n                ? `Ask about \"${problemData.title}\"...` \n                : \"Enter a LeetCode URL or ask a question...\"}\n              value={textInput}\n              onChange={(e) => setTextInput(e.target.value)}\n              disabled={isLoading}\n            />\n            <button \n              type=\"submit\" \n              disabled={!textInput.trim() || isLoading}\n              className={isLoading ? 'loading' : ''}\n            >\n              {isLoading ? '...' : 'Send'}\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}